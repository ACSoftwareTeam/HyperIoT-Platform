apply plugin: 'com.github.lburgazzoli.karaf'



configurations {
	widget {
		transitive = false
	}
      widgetRest {
		transitive = false
	}
}

dependencies {
	widget 'it.acsoftware.hyperiot.widget:HyperIoTWidget-api:'+project.version
	widget 'it.acsoftware.hyperiot.widget:HyperIoTWidget-service:'+project.version
    widget 'it.acsoftware.hyperiot.widget:HyperIoTWidget-actions:'+project.version
	widget 'it.acsoftware.hyperiot.widget:HyperIoTWidget-model:'+project.version
	widget 'it.acsoftware.hyperiot.widget:HyperIoTWidget-repository:'+project.version
 	widgetRest 'it.acsoftware.hyperiot.widget:HyperIoTWidget-service-rest:'+project.version
}


karaf {
    features {
        // See section below for karaf 4 support if using 1.3.0
        xsdVersion  = '1.2.0'
        version     = '4.0.0' // Your project version
        description = 'Karaf features'

        // Include the current project, false by default
        includeProject = false

        // Add in extra repositories to the features xml file
        //Example:
        //repository "mvn:org.code-house.jackson/features/2.8.7/xml/features"

        feature {
            name        = 'hyperiot-widget'
            description = 'All  HyperIoT HyperIoTWidget modules'

            feature 'hyperiot-base'
            configurations 'widget','widgetRest'

            project.configurations
                    .collectMany { it.allDependencies }
                    .findAll {
                        bundle(it.getAt("group") + ":" + it.getAt("name")) {
                            attribute 'start-level', '91'
                        }
                    }

        }


        feature {
            name        = 'hyperiot-widget-basic'
            description = 'All  HyperIoT HyperIoTWidget modules with NO rest services'

            feature 'hyperiot-base-basic'
            configurations 'widget'
        }

    }

    // Enable generation of Karaf Archive KAR based on features defined above.
    // To generate kar either use generateKar, assemble or install
    kar {
        // Optionally set the kar name, default is:
        //
        //     ${features.name}-${features.version}.kar
        //
        // Extension is automatically set to .kar
        archiveName = 'HyperIoTWidget'
    }
}


task buildHIT(type: GradleBuild) {

}

task buildFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install' ]
}

task publishHIT(type: GradleBuild) {

}

task publishFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install','publish' ]
}

def featureFile = 'build/karaf/features/'+project.name+'-'+project.version+'.xml'
publishing {
    publications {
        hyperiot(MavenPublication) {
            artifactId project.name
            artifact source: featureFile, classifier: 'features'
        }
    }
 }
