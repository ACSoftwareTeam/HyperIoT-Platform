apply plugin: 'com.github.lburgazzoli.karaf'



configurations {
	ruleEngine {
		transitive = false
	}

    ruleEngineRest {
		transitive = false
	}

    kie {
        transitive = false
    }
}

dependencies {
    ruleEngine 'it.acsoftware.hyperiot.rule:HyperIoTRuleEngine-actions:'+project.version
 	ruleEngine 'it.acsoftware.hyperiot.rule:HyperIoTRuleEngine-api:'+project.version
	ruleEngine 'it.acsoftware.hyperiot.rule:HyperIoTRuleEngine-service:'+project.version
	ruleEngine 'it.acsoftware.hyperiot.rule:HyperIoTRuleEngine-model:'+project.version
	ruleEngine 'it.acsoftware.hyperiot.rule:HyperIoTRuleEngine-repository:'+project.version
    kie 'commons-codec:commons-codec:1.15'
    kie 'org.kie.soup:kie-soup-commons:7.20.0.Final'
    kie 'org.kie.soup:kie-soup-project-datamodel-api:7.20.0.Final'
    kie 'org.kie.soup:kie-soup-project-datamodel-commons:7.20.0.Final'
    kie 'org.kie.soup:kie-soup-maven-support:7.20.0.Final'
    kie 'org.kie:kie-api:7.20.0.Final'
    kie 'org.kie:kie-internal:7.20.0.Final'
    kie 'org.drools:drools-core:7.20.0.Final'
    kie 'org.drools:drools-compiler:7.20.0.Final'
    kie 'com.google.protobuf:protobuf-java:3.6.1'
    kie 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.antlr:3.5_1'
    kie 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.xstream-java8:1.4.10_1'
    //these deps are not needed since they are already provided inside karaf
    //i leave it here just to track all needed deps
    //kie 'org.apache.servicemix.specs:org.apache.servicemix.specs.jaxb-api-2.2:2.2.0'
    //kie 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.jaxb-xjc:2.2.11_1'
    //kie 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.jaxb-impl:2.2.11_1'
    kie 'org.mvel:mvel2:2.4.4.Final'
 	ruleEngineRest 'it.acsoftware.hyperiot.rule:HyperIoTRuleEngine-service-rest:'+project.version

}

karaf {
    features {
        // See section below for karaf 4 support if using 1.3.0
        xsdVersion  = '1.2.0'
        version     = '4.0.0' // Your project version
        description = 'Karaf features'

        // Include the current project, false by default
        includeProject = false

        // Add in extra repositories to the features xml file
        //Example:
        //repository "mvn:org.code-house.jackson/features/2.8.7/xml/features"
        //repository "mvn:org.kie/kie-karaf-features/7.20.0.Final/xml/features"

        feature {
            name        = 'hyperiot-ruleengine'
            description = 'All  Hyperiot HyperIoTRuleEngine modules'

            feature 'hyperiot-base'
            //feature 'kie'
            configurations 'ruleEngine','kie','ruleEngineRest'

            project.configurations
                    .collectMany { it.allDependencies }
                    .findAll {
                        bundle(it.getAt("group") + ":" + it.getAt("name")) {
                            attribute 'start-level', '83'
                        }
                    }
        }


        feature {
            name        = 'hyperiot-ruleengine-basic'
            description = 'All  Hyperiot HyperIoTRuleEngine modules with NO rest services'

            feature 'hyperiot-base-basic'
            configurations 'ruleEngine'
        }

    }

    // Enable generation of Karaf Archive KAR based on features defined above.
    // To generate kar either use generateKar, assemble or install
    kar {
        // Optionally set the kar name, default is:
        //
        //     ${features.name}-${features.version}.kar
        //
        // Extension is automatically set to .kar
        archiveName = 'HyperIoTRuleEngine'
    }
}


task buildHIT(type: GradleBuild) {

}

task buildFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install' ]
}

task publishHIT(type: GradleBuild) {

}

task publishFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install','publish' ]
}

def featureFile = 'build/karaf/features/'+project.name+'-'+project.version+'.xml'
publishing {
    publications {
        hyperiot(MavenPublication) {
            artifactId project.name
            artifact source: featureFile, classifier: 'features'
        }
    }
 }
